_section: Documentation @<documentation>

_subsection: What is ethereum-indexer? @<preamble>

The ethereum-indexer library aims to be a complete and modular system to run ethereum indexer both in node and in browser. 

It especially designed for the latter but modules already exist to be used in a node-js envorinment.


# Main Goal:

The main goal of this library is to allow decentralised application that expect every user to provide their own JSON RPC enabled ethereum node to not require any backend services (or at max a event cache).

This is not designed to support every kind of indexing as the limitation of the in-browser enviroment limit some of the features expected by some indexing strategy.

An example of such impossibility is generic ERC-721 indexing that require a big amount of data and a big amount of extra request to fetch each token metadata uri.

Having said that, an in-browser indexing strategy for ERC721 can work in the context of a single user where the indexer would filter out all the token not belonging to the user in question.

# Caveats

Due to the limitation of EIP-1191???? (no batch request) and the current JSON RPC spec (no timestamp available in eth_getLogs result (See +++)) the indexer processors are expected to not make use of its features.

Using these features would work in a server environment where results can be cached across load-balanced instanced, in a browser environment where each user would have its own instance, these would slow down the indexing too much.

Having said that an hybrid approach is possible where a server index and the in-browser indexer exists only as a backup when every server instances are unavailable expect for a cache (which could even be shared across user in p2p manner).



_subsection: Features @<features>

- ffsf
- **MIT License** (including //ALL// dependencies); completely open source to do with as you please


- multiple db type, current focus is a native JSON/JS object db (With BigInt support) especially friendly for an in-browser envorinment with support for reorg and a simple api for indexer processor

- can support additive events where block scaning are provided and past event 

// TODO proxy with blocknumber implementation switch
// TODO Diamond with blocknumber implementation switch
// ACTUALY no: overhead would be too much


- when event subscription is changed (new event added, or removed ?) the system could attempt to detect safety mechanism for not re-indexing (assuming block number at which change happen is provided) or be told that the change is safe and does not need re-indexing (for example if only new event is added and the update is made before the deployment of the new contract is live)
- main task is to first support the latter.

_subsection: Developer Documentation

_toc:

    getting-started
    concepts
    cli
    cookbook
    migration
    testing
    contributing
    other-resources
    documentation
    license
